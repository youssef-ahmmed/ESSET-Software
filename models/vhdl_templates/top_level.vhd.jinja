library ieee;
use ieee.std_logic_1164.all;
use work.Common_Ports.all;

entity {{ top_level_name }} is
    generic (
        N: positive := 8  -- Number of output channels
    );

    port (
        {%- if option == "UART" or fuzz_on == "UART"%}
        -- UART Ports
        i_TX_DV: in std_logic;
        i_TX_Byte: in std_logic_vector(N-1 downto 0);
        o_TX_Active: out std_logic;
        o_TX_Serial: out std_logic;
        o_TX_Done: out std_logic;
        i_Start_Sniffing: in std_logic;

        {%- elif option == "SPI" %}
        -- SPI Slave ports
        i_SPI_clk: in std_logic;
        -- SPI Master ports
        o_SPI_MOSI: out std_logic;
        o_sck: out std_logic;
        o_SS: out std_logic;

        {%- elif option == "NBits" %}
        -- NBits Sniffing Port
        i_Nbit: in std_logic_vector(N-1 downto 0);
        {%- endif %}

        -- General Ports
        i_1bit: in std_logic;
        o_Nbit: out std_logic_vector(N-1 downto 0);
        clk: in std_logic;
        o_status: out std_logic;
        i_ACK: in std_logic
        -- ack of RPI that the DV signal has been detected
        -- i_sck_RPI: in std_logic;
        -- output of communication module
        -- o_1bit: out std_logic
    );
end {{ top_level_name }};

architecture behav of {{ top_level_name }} is
    signal r_status: std_logic := '0';
    signal r_SV: std_logic := '0'; --stream valid
    signal r_bytes: std_logic_vector ({{ output_size - 1 }} downto 0); -- condition based
begin

    {%- if option in ["One_Bit", "NBit"] %}
    -- Sniffing instance
    {% set sniffing_entity = "One_Bit_Sniffing" if option == "One_Bit" else "NBit_Sniffing" %}
    {{ sniffing_entity }}_instance: entity work.{{ sniffing_entity }}
    port map (
        i_1bit => i_1bit,
        o_Nbit => data_sniffing_out_buffer,
        clk => clk,
        o_status => o_status
    );
    {%- endif %}

    {%- if (attack_operation in ["Sniffing", "Stream Finder", "Fuzzing"]) and (option == "UART" or sniff_on == "UART") %}
    -- UART Receiver instance
    UART_Receiver_Instance: entity work.UART_Receiver
    port map(
        i_Clk => clk,
        i_RX_Serial => i_1bit,
        o_RX_DV => r_DV,
        i_Start => i_Start_Sniffing,
        o_RX_Byte => data_sniffing_out_buffer
    );
    {%- endif %}

    {%- if (attack_operation in ["Replay Attack", "Fuzzing"]) and (option == "UART" or fuzz_on == "UART") %}
    -- UART Transmitter instance
    UART_Transmitter_Instance: entity work.UART_Transmitter
    port map(
        i_Clk => clk,
        i_TX_DV => i_TX_DV,
        i_TX_Byte => i_TX_Byte,
        o_TX_Serial => o_TX_Serial,
        o_TX_Done => o_TX_Done
    );
    {%- endif %}

    {%- if (attack_operation in ["Sniffing", "Stream Finder", "Fuzzing"]) and (option == "SPI" or sniff_on == "SPI") %}
    -- SPI Slave instance
    SPI_Slave_Instance: entity work.SPI_Slave
    port map(
        i_MOSI => i_1bit,
        o_DV => o_status,
        o_Rec_Data => data_sniffing_out_buffer,
        i_SCK => i_SPI_clk
    );
    {%- endif %}

    {%- if (attack_operation in ["Replay Attack", "Stream Finder", "Fuzzing"]) and (option == "SPI" and fuzz_on == "SPI") %}
    -- SPI Master instance
    SPI_Master_Instance: entity work.SPI_Master
    port map(
        o_MOSI => o_SPI_MOSI,
        o_sck => o_sck,
        o_SS => o_SS,
        i_clk => clk,
        i_TX_Byte => X"35",
        i_TX_DV => '1'
    );
    {%- endif %}

    {%- if attack_operation == "Stream Finder" and action == "Drop Communication" %}
    -- Conditional Bypass instance
    Conditional_ByPass_Instance: entity work.ConditionalByPass
    port map(
        clk => clk,
        i_input => r_bytes,
        i_DV => r_SV,
        o_status => r_status
    );

    -- Stream Buffer instance
    StreamBuffer_Instance: entity work.StreamBuffer
    port map(
        clk => clk,
        i_DV => r_DV,
        Data_In => data_sniffing_out_buffer,
        Data_Out => r_bytes,
        DV_Out => r_SV
    );

    -- AND Gate instance
    AndGate_Instance: entity work.AndGate
    port map(
        clk => clk,
        i_input => i_1bit,
        i_enable => r_status,
        o_output => o_TX_Serial
    );
    {%- endif %}

    {%- if attack_operation in ["Sniffing", "Stream Finder", "Fuzzing"] %}
    -- Communication Protocol instance
    Communication_Module_instance: entity work.Communication_Module
    port map (
        clk => clk,
        in_comm_channel => data_sniffing_out_buffer,
        out_comm_channel => o_Nbit,
        i_DV => r_DV,
        o_DV => o_status,
        i_ACK => i_Ack
    );
    {%- endif %}

end behav;
