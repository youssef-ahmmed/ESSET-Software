library ieee;
use ieee.std_logic_1164.all;
use work.Common_Ports.all;

entity {{ top_level_name }} is
    generic (
        N: positive := {{ channels_number }}  -- Number of output channels
    );

    port (
        -- Connect to the common ports
        {%- if option == "UART" %}
        i_TX_DV: in std_logic;
        i_TX_Byte   : in  std_logic_vector(N-1 downto 0);
        o_TX_Active : out std_logic;
        o_TX_Serial : out std_logic;
        o_TX_Done   : out std_logic;
        {%- endif %}

        i_1bit: in std_logic;
        i_Nbit: in std_logic_vector(N-1 downto 0);
        o_Nbit: out std_logic_vector(N-1 downto 0);
        clk: in std_logic;
        o_status: out std_logic
    );

end {{ top_level_name }};

architecture behav of {{ top_level_name }} is
begin

    {%- if option == "1Bit" %}
    -- 1Bit_Sniffing instance
    1Bit_Sniffing_instance : entity work.1Bit_Sniffing
    port map (
        i_1bit => i_1bit,
        o_Nbit => data_signal_buffer,
        clk => clk,
        o_status => o_status
    );
    {%- endif %}

    {%- if option == "NBit" %}
    -- NBit_Sniffing instance
    NBit_Sniffing_instance : entity work.NBit_Sniffing
    port map (
        i_Nbit => i_Nbit,
        o_Nbit => data_signal_buffer,
        clk => clk,
        o_status => o_status
    );
    {%- endif %}

    {%- if option == "UART" %}
    -- UART Receiver instance
    UART_Receiver_Instance: entity work.UART_Receiver
        port map(
        i_Clk => clk,
        i_RX_Serial => i_1bit,
        o_RX_DV => o_status,
        o_RX_Byte => data_signal_buffer
    );

    -- UART Transmitter instance
    UART_Transmitter_Instance: entity work.UART_Transmitter
    port map(
        i_Clk => clk,
        i_TX_DV => i_TX_DV,
        i_TX_Byte => i_TX_Byte,
        o_TX_Active => o_TX_Active,
        o_TX_Serial => o_TX_Serial,
        o_TX_Done => o_TX_Done
    );
    {%- endif %}

    -- Communication_Protocol instance
    Communication_Module_instance : entity work.Communication_Module
    port map (
        -- Connect to the common ports
        i_Nbit_comm => data_signal_buffer,
        o_Nbit_comm => o_Nbit
    );

    -- Connect the status signal from Data_Sniffing to an external signal
    -- o_status <= status_signal;

end behav;
